version: 2.1

orbs:
  sixrs-gke: sixriversystems/sixrs-gke@7

aliases:
  - &pg_default "14.11"
  - &pg_future "15.6"
  - &pg_latest "16.2"

jobs:
  all-in-one:
    parameters:
      pgver:
        type: string
      cgo:
        type: string
    docker:
      - image: cimg/go:1.22
      - image: cimg/postgres:<< parameters.pgver >>
        environment:
          POSTGRES_USER: circle
          POSTGRES_DB: circle_test

    environment:
      TEST_RESULTS: /tmp/test-results
      DATABASE_URL: "postgres://circle@localhost:5432/circle_test?sslmode=disable"
      GOPRIVATE: "go.6river.tech/*,github.com/6RiverSystems/*"
      CGO_ENABLED: << parameters.cgo >>

    resource_class: large

    steps:
      - checkout
      - restore_cache:
          name: Restore module cache
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}-{{checksum "example/go.sum" }}

      # for Go modules, we only need version numbers on `main`, as Go can
      # pull any other git commit by hash. we only need to do this for one matrix variant.
      - when:
          condition:
            and:
              - equal: ["main", << pipeline.git.branch >>]
              - equal: ["1", << parameters.cgo >>]
              - equal: [*pg_default, << parameters.pgver >>]
          steps:
            - sixrs-gke/run-release
            - store_artifacts:
                name: Capture chosen version
                path: .version

      # even with the module cache restored, this takes a while for some reason,
      # skip it for now and just save/restore the modules we actually use for
      # the run
      # - run:
      #     name: Download Go Modules
      #     command: |
      #       ./mage -v get
      #       cd example
      #       ./mage -v get

      - run:
          name: Compile Library
          command: ./mage -v compile
      - run:
          name: Compile Example
          working_directory: example
          command: ./mage -v compile

      - run:
          name: Prepare for tests
          command: mkdir -p $TEST_RESULTS/{gosix,example}
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run Library Tests
          environment:
            NODE_ENV: test
          # while we aren't using the parallel test split here, we still need to
          # use test-go-ci-split to get junit output and proper coverage file
          # storage
          command: TEST_RESULTS=$TEST_RESULTS/gosix ./mage -v testGoCISplit
      - run:
          name: Run Example Tests
          environment:
            NODE_ENV: test
          working_directory: example
          command: TEST_RESULTS=$TEST_RESULTS/example ./mage -v testGoCISplit

      - sixrs-gke/codecov:
          codecov-params: "-s ${TEST_RESULTS}"
      - store_artifacts:
          name: Capture test result artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          name: Store test results for CircleCI
          path: /tmp/test-results
      - save_cache:
          name: Save module cache
          key: go-mod-v2-{{ checksum "go.sum" }}-{{ checksum "example/go.sum" }}
          paths:
            - "/home/circleci/go/pkg"

      # post to slack if `main` fails to build
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - sixrs-gke/status:
                channel: "#curiosity_alerts"
                fail_only: true

  lint:
    docker:
      - image: cimg/go:1.22
    environment:
      TEST_RESULTS: /tmp/test-results
      # DATABASE_URL: "postgres://circle@localhost:5432/circle_test?sslmode=disable"
      GOPRIVATE: "go.6river.tech/*,github.com/6RiverSystems/*"
      CGO_ENABLED: 0
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          name: Restore module cache
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}-{{checksum "example/go.sum" }}
      - run:
          # library portion is something others pull in, so the proper generated
          # code _MUST_ be committed and up to date. We check on the example
          # service at the same time for completness.
          name: Verify generated code is up to date
          command: |
            ./mage -v cleanGenerated generate:force formatGenerated
            pushd example
            ./mage -v generate:force formatGenerated
            popd
            git diff --exit-code
      # format check is just golangci-lint, so don't need to run it separately,
      # running the linter is sufficient and will error on formatting problems.
      - run:
          name: Prepare for tests
          command: mkdir -p $TEST_RESULTS/{gosix,example}
      - run:
          name: Lint Library
          command: TEST_RESULTS=$TEST_RESULTS/gosix ./mage -v lint:ci
      - run:
          name: Lint Example
          working_directory: example
          command: TEST_RESULTS=$TEST_RESULTS/example ./mage -v lint:ci
      - store_artifacts:
          name: Capture test result artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          name: Store test results for CircleCI
          path: /tmp/test-results

  build-docker-multiarch:
    docker:
      - image: cimg/go:1.22
    resource_class: large
    environment:
      GOPRIVATE: "go.6river.tech/*,github.com/6RiverSystems/*"
    steps:
      - checkout
      - restore_cache:
          name: Restore module cache
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}-{{ checksum "example/go.sum" }}
      # for Go modules, we only need version numbers on `main`, as Go can
      # pull any other git commit by hash. We do need a version tag for
      # docker for this package however, just don't need it to be a git
      # tag.
      - when:
          condition:
            equal: ["main", << pipeline.git.branch >>]
          steps:
            - sixrs-gke/run-release
            - run: mv -v .version example/.version
      - unless:
          condition:
            equal: ["main", << pipeline.git.branch >>]
          steps:
            - run:
                name: Select dev version
                working_directory: example
                command: ./mage -v generate:devVersion

      - store_artifacts:
          name: Capture chosen version
          path: example/.version
      - run:
          name: Download Go Modules
          command: ./mage -v get
      - run:
          name: Generate Code
          working_directory: example
          command: ./mage -v generate
      - setup_remote_docker
      - sixrs-gke/docker-login
      - run:
          name: Initialize docker buildx
          command: |
            docker run --privileged --rm tonistiigi/binfmt --install all
            docker context create multiarch-context
            docker buildx create --name gosix-multiarch --driver docker-container --bootstrap --use multiarch-context
      - run:
          name: Build multiarch binaries
          working_directory: example
          command: ./mage -v releaseBinaries
      - run:
          name: Build multiarch docker images
          working_directory: example
          command: ./mage -v docker:multiarchBuildAll
      - run:
          name: Verify docker images
          working_directory: example
          command: |
            set -xeuo pipefail
            for plat in amd64 arm64 ; do
              ./mage -v docker:multiarchLoadArch service $plat
              docker run --rm --platform linux/$plat --entrypoint /app/service gosix-example-service:$(<.version) --version
              # fire this one into the background for the smoke test run
              docker run --name service-smoke-$plat --rm --platform linux/$plat \
                --env 'DATABASE_URL=sqlite:///data/gosix-example-service.sqlite?_pragma=foreign_keys(1)&_pragma=journal_mode(wal)&_pragma=busy_timeout(10000)&cache=private&_txlock=immediate' \
                --env 'PUBSUB_EMULATOR_HOST=localhost:8802' \
                --env 'PUBSUB_GCLOUD_PROJECT_ID=__none__' \
                gosix-example-service:$(<.version) &
              pid=$!
              # can't contact the remote docker directly, so we have to build
              # the mage binary, copy it over, and exec it
              CGO_ENABLED=0 ./mage -v -compile magebinary-$plat -goarch $plat
              docker cp magebinary-$plat service-smoke-$plat:/
              # this should ask the app to shut down at the end
              docker exec service-smoke-$plat /magebinary-$plat -v testSmokeCore service localhost:3000
              wait $pid
            done
      # we don't bother pushing the docker images for now, it's just an example
      # of how to build them, no need to waste registry space by publishing them

workflows:
  build-workflow:
    jobs:
      - all-in-one:
          context: 6rs-circle
          matrix:
            parameters:
              pgver:
                - *pg_default
                - *pg_future
                - *pg_latest
              cgo:
                - "1"
                - "0"
      - lint:
          context: 6rs-circle
      - build-docker-multiarch:
          context: 6rs-circle
          requires:
            - all-in-one
            - lint
          filters:
            branches:
              only:
                - main
                - publish/*
