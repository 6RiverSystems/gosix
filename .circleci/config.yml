version: 2.1

jobs:
  all-in-one:
    # performance experiment: do everything in one big run, to avoid all the
    # layer caching problems. seems to be faster for small projects but this may
    # not hold for larger ones
    docker:
      - image: cimg/go:1.16
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: circle
          POSTGRES_DB: circle_test

    environment:
      TEST_RESULTS: /tmp/test-results
      DATABASE_URL: "postgres://circle@localhost:5432/circle_test?sslmode=disable"

    steps:
      - checkout
      - run:
          name: Limit cache weekly
          command: date +%Y%U >/tmp/cache-time-limit
      - restore_cache:
          name: Restore module cache
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - restore_cache:
          name: Restore similar AIO build cache
          keys:
            - go-build-aio-v1-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
            - go-build-aio-v1-{{ checksum "/tmp/cache-time-limit" }}-

      - run:
          name: Initialize ci_scripts
          command: |
            mkdir ci_scripts
            curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept:application/vnd.github.v3.raw" https://api.github.com/repos/6RiverSystems/ci_scripts/contents/ci_tool.sh > ci_scripts/ci_tool.sh
            chmod +x ci_scripts/ci_tool.sh
      - run:
          name: Determine new version
          # for Go modules, we only need version numbers on `main`, as Go can
          # pull any other git commit by hash
          # FIXME: disabled until we are ready to start versioning
          command: |
            if false && [ "$CIRCLE_BRANCH" = "main" ]; then
              ./ci_scripts/ci_tool.sh --run_release
            fi
      - store_artifacts:
          name: Capture chosen version
          path: .version
      - run: make get
      - run: make install-ci-tools
      - run:
          # this is a library others pull in, so the proper generated code _MUST_
          # be committed
          name: Verify committed generated code is up to date
          command: |
            make clean-generated
            make generate
            git diff --exit-code

      - run:
          name: Compile code
          command: make -j compile

      - run:
          name: Prepare for tests
          command: mkdir -p $TEST_RESULTS
      - run:
          name: format check
          command: |
            make fmt
            git diff --exit-code
      - run:
          name: vet
          command: make vet
      - run:
          name: lint
          command: |
            go run github.com/golangci/golangci-lint/cmd/golangci-lint run --out-format=junit-xml >${TEST_RESULTS}/golangci-lint.xml

      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run tests
          environment:
            NODE_ENV: test
          # while we aren't using the parallel test split here, we still need to
          # use test-go-ci-split to get junit output and proper coverage file
          # storage
          command: |
            make \
              TEST_RESULTS="${TEST_RESULTS}" \
              PACKAGE_NAMES=./... \
              test-go-ci-split

      - run:
          name: Coverage HTML report
          command: |
            go tool cover -html="${TEST_RESULTS}/coverage.out" -o "${TEST_RESULTS}/coverage.html"
      - run:
          name: Upload coverage
          command: |
            bash <( curl -s --fail https://codecov.io/bash ) -s "${TEST_RESULTS}"

      - store_artifacts:
          name: Capture test result artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          name: Store test results for CircleCI
          path: /tmp/test-results
      - save_cache:
          name: Save module cache
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg"
      - save_cache:
          name: Save AIO build cache
          key: go-build-aio-v1-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
          paths:
            - ~/.cache/go-build

workflows:
  version: 2
  build-workflow:
    jobs:
      - all-in-one:
          context: 6rs-circle
